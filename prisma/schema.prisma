generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String      @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean     @default(false)
  author      String

  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  chapters    Chapter[]
  purchases   Purchase[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id          String         @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean        @default(false)
  isFree      Boolean        @default(false)

  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([courseId])
}

model UserProgress {
  id          String     @id @default(uuid())
  userId      String

  chapterId   String
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id          String     @id @default(uuid())
  userId      String

  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId]) // ! no one can buy the same course 2 times!!
  @@index([courseId])
}

model StripeCustomer {
  id                String   @id @default(uuid())
  userId            String   @unique
  stripeCustomerId  String   @unique

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  role      Role     @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  TEACHER
  ADMIN
}

